/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	eventingv1beta1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/broker/v1beta1"
	eventsv1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/events/v1"
	eventsv1alpha1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/events/v1alpha1"
	eventsv1beta1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/events/v1beta1"
	internalv1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/intevents/v1"
	internalv1alpha1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/intevents/v1alpha1"
	internalv1beta1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/intevents/v1beta1"
	messagingv1alpha1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/messaging/v1alpha1"
	messagingv1beta1 "github.com/google/knative-gcp/pkg/client/clientset/versioned/typed/messaging/v1beta1"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	EventingV1beta1() eventingv1beta1.EventingV1beta1Interface
	EventsV1alpha1() eventsv1alpha1.EventsV1alpha1Interface
	EventsV1beta1() eventsv1beta1.EventsV1beta1Interface
	EventsV1() eventsv1.EventsV1Interface
	InternalV1alpha1() internalv1alpha1.InternalV1alpha1Interface
	InternalV1beta1() internalv1beta1.InternalV1beta1Interface
	InternalV1() internalv1.InternalV1Interface
	MessagingV1alpha1() messagingv1alpha1.MessagingV1alpha1Interface
	MessagingV1beta1() messagingv1beta1.MessagingV1beta1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	eventingV1beta1   *eventingv1beta1.EventingV1beta1Client
	eventsV1alpha1    *eventsv1alpha1.EventsV1alpha1Client
	eventsV1beta1     *eventsv1beta1.EventsV1beta1Client
	eventsV1          *eventsv1.EventsV1Client
	internalV1alpha1  *internalv1alpha1.InternalV1alpha1Client
	internalV1beta1   *internalv1beta1.InternalV1beta1Client
	internalV1        *internalv1.InternalV1Client
	messagingV1alpha1 *messagingv1alpha1.MessagingV1alpha1Client
	messagingV1beta1  *messagingv1beta1.MessagingV1beta1Client
}

// EventingV1beta1 retrieves the EventingV1beta1Client
func (c *Clientset) EventingV1beta1() eventingv1beta1.EventingV1beta1Interface {
	return c.eventingV1beta1
}

// EventsV1alpha1 retrieves the EventsV1alpha1Client
func (c *Clientset) EventsV1alpha1() eventsv1alpha1.EventsV1alpha1Interface {
	return c.eventsV1alpha1
}

// EventsV1beta1 retrieves the EventsV1beta1Client
func (c *Clientset) EventsV1beta1() eventsv1beta1.EventsV1beta1Interface {
	return c.eventsV1beta1
}

// EventsV1 retrieves the EventsV1Client
func (c *Clientset) EventsV1() eventsv1.EventsV1Interface {
	return c.eventsV1
}

// InternalV1alpha1 retrieves the InternalV1alpha1Client
func (c *Clientset) InternalV1alpha1() internalv1alpha1.InternalV1alpha1Interface {
	return c.internalV1alpha1
}

// InternalV1beta1 retrieves the InternalV1beta1Client
func (c *Clientset) InternalV1beta1() internalv1beta1.InternalV1beta1Interface {
	return c.internalV1beta1
}

// InternalV1 retrieves the InternalV1Client
func (c *Clientset) InternalV1() internalv1.InternalV1Interface {
	return c.internalV1
}

// MessagingV1alpha1 retrieves the MessagingV1alpha1Client
func (c *Clientset) MessagingV1alpha1() messagingv1alpha1.MessagingV1alpha1Interface {
	return c.messagingV1alpha1
}

// MessagingV1beta1 retrieves the MessagingV1beta1Client
func (c *Clientset) MessagingV1beta1() messagingv1beta1.MessagingV1beta1Interface {
	return c.messagingV1beta1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.eventingV1beta1, err = eventingv1beta1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eventsV1alpha1, err = eventsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eventsV1beta1, err = eventsv1beta1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eventsV1, err = eventsv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.internalV1alpha1, err = internalv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.internalV1beta1, err = internalv1beta1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.internalV1, err = internalv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.messagingV1alpha1, err = messagingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.messagingV1beta1, err = messagingv1beta1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.eventingV1beta1 = eventingv1beta1.NewForConfigOrDie(c)
	cs.eventsV1alpha1 = eventsv1alpha1.NewForConfigOrDie(c)
	cs.eventsV1beta1 = eventsv1beta1.NewForConfigOrDie(c)
	cs.eventsV1 = eventsv1.NewForConfigOrDie(c)
	cs.internalV1alpha1 = internalv1alpha1.NewForConfigOrDie(c)
	cs.internalV1beta1 = internalv1beta1.NewForConfigOrDie(c)
	cs.internalV1 = internalv1.NewForConfigOrDie(c)
	cs.messagingV1alpha1 = messagingv1alpha1.NewForConfigOrDie(c)
	cs.messagingV1beta1 = messagingv1beta1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.eventingV1beta1 = eventingv1beta1.New(c)
	cs.eventsV1alpha1 = eventsv1alpha1.New(c)
	cs.eventsV1beta1 = eventsv1beta1.New(c)
	cs.eventsV1 = eventsv1.New(c)
	cs.internalV1alpha1 = internalv1alpha1.New(c)
	cs.internalV1beta1 = internalv1beta1.New(c)
	cs.internalV1 = internalv1.New(c)
	cs.messagingV1alpha1 = messagingv1alpha1.New(c)
	cs.messagingV1beta1 = messagingv1beta1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
