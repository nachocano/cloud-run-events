/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/google/knative-gcp/pkg/apis/events/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudStorageSourceLister helps list CloudStorageSources.
type CloudStorageSourceLister interface {
	// List lists all CloudStorageSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CloudStorageSource, err error)
	// CloudStorageSources returns an object that can list and get CloudStorageSources.
	CloudStorageSources(namespace string) CloudStorageSourceNamespaceLister
	CloudStorageSourceListerExpansion
}

// cloudStorageSourceLister implements the CloudStorageSourceLister interface.
type cloudStorageSourceLister struct {
	indexer cache.Indexer
}

// NewCloudStorageSourceLister returns a new CloudStorageSourceLister.
func NewCloudStorageSourceLister(indexer cache.Indexer) CloudStorageSourceLister {
	return &cloudStorageSourceLister{indexer: indexer}
}

// List lists all CloudStorageSources in the indexer.
func (s *cloudStorageSourceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudStorageSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudStorageSource))
	})
	return ret, err
}

// CloudStorageSources returns an object that can list and get CloudStorageSources.
func (s *cloudStorageSourceLister) CloudStorageSources(namespace string) CloudStorageSourceNamespaceLister {
	return cloudStorageSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudStorageSourceNamespaceLister helps list and get CloudStorageSources.
type CloudStorageSourceNamespaceLister interface {
	// List lists all CloudStorageSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CloudStorageSource, err error)
	// Get retrieves the CloudStorageSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CloudStorageSource, error)
	CloudStorageSourceNamespaceListerExpansion
}

// cloudStorageSourceNamespaceLister implements the CloudStorageSourceNamespaceLister
// interface.
type cloudStorageSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudStorageSources in the indexer for a given namespace.
func (s cloudStorageSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudStorageSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudStorageSource))
	})
	return ret, err
}

// Get retrieves the CloudStorageSource from the indexer for a given namespace and name.
func (s cloudStorageSourceNamespaceLister) Get(name string) (*v1alpha1.CloudStorageSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudstoragesource"), name)
	}
	return obj.(*v1alpha1.CloudStorageSource), nil
}
